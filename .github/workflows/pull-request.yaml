#
# this is the release workflow that is triggered by a pull requests to the main branch
#
# it will react to
# - created pull requests
# - pull request reviews
# - pull_request_review_comments
#
name: 'pull-request'

on:
  # pull_request:
  #   types:
  #     - opened
  #     - closed
  #     - reopened
  #     - ready_for_review
  #     - review_requested
  #     - review_request_removed
  #     - labeled
  #     - unlabeled
  #     - synchronize
  #     - assigned
  #     - unassigned
  #     - converted_to_draft
  #     - ready_for_review
  #     - review_requested
  #     - review_request_removed
  #     - auto_merge_disabled
  #     - auto_merge_disabled
  #     - edited
  pull_request_target:
    types:
      - opened
      - closed
      - reopened
      - ready_for_review
      - review_requested
      - review_request_removed
      - labeled
      - unlabeled
      - synchronize
      - assigned
      - unassigned
      - converted_to_draft
      - ready_for_review
      - review_requested
      - review_request_removed
      - auto_merge_disabled
      - auto_merge_disabled
      - edited
  pull_request_review:
    types:
      - submitted
      - edited
      - dismissed
  pull_request_review_comment:
    types:
      - created
      - edited
      - deleted
  issue_comment:  # not yet implemented
    types:
      - created
      - edited
      - deleted
jobs:
  send_notification:
    runs-on: ubuntu-latest
    name: Send message to gchat
    steps:
      # - name: Checkout code
      #   uses: actions/checkout@v2
      #   with:
      #     ref: ${{ github.ref }}
      - name: Dump GitHub context
        env:
          CONTEXT: ${{ toJson(github) }}
          JOB_CONTEXT: ${{ toJson(job) }}
          STEPS_CONTEXT: ${{ toJson(steps) }}
          RUNNER_CONTEXT: ${{ toJson(runner) }}
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: |
          cat << EOF
          ####### 'github' #######
          echo $CONTEXT"
          ####### 'job' #######
          $JOB_CONTEXT"
          ###### 'steps' #######
          $STEPS_CONTEXT
          ###### 'runner' #######
          $RUNNER_CONTEXT"
          ###### 'strategy' #######
          $STRATEGY_CONTEXT"
          ###### 'matrix' #######
          $MATRIX_CONTEXT"
          ###### environment #######
          $(env | grep GITHUB)
          EOF
      - name: generate google chat thread id
        id: google_chat_thread_id
        run: echo "GOOGLE_CHAT_THREAD_ID=$(echo '${{ github.event.pull_request.number || github.event.issue.number }}' | jq -sRr @uri)" >> $GITHUB_OUTPUT

      - name: Send pull request created message
        if: ${{ github.event_name == 'pull_request_target' || github.event_name == 'pull_request' }}
        run: |
          curl -X POST \
            -H 'Content-Type: application/json' \
            -d "{\"text\": \"${{ github.event_name }} ${{ github.triggering_actor }} ${{ github.event.action }} / ${{ github.event.pull_request.state }} pull request '${{ github.event.pull_request.title }}' ${{ github.event.pull_request.draft && '(draft)' || '' }} : \n\n${{ github.event.pull_request.body || '' }}\n\n${{ github.event.pull_request._links.html.href }} \" }" \
            "${{secrets.GOOGLECHAT_PIPELINE_ANNOUNCEMENTS_WEBHOOK}}&messageReplyOption=REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD&thread_key=${{ steps.google_chat_thread_id.outputs.GOOGLE_CHAT_THREAD_ID }}"

      - name: send pull request review message
        if: ${{ github.event_name == 'pull_request_review' }}
        run: |
          curl -X POST \
            -H 'Content-Type: application/json' \
            -d "{\"text\": \"${{ github.event_name }} : ${{ github.triggering_actor }} ${{ github.event.action }} / ${{ github.event.pull_request.state }} '${{ github.event.pull_request.title }}' ${{ github.event.pull_request.draft && '(draft)' || '' }} : \n\n${{ github.event.review.body || '' }}\n\n${{ github.event.review._links.html.href }} \" }" \
            "${{secrets.GOOGLECHAT_PIPELINE_ANNOUNCEMENTS_WEBHOOK}}&messageReplyOption=REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD&thread_key=${{ steps.google_chat_thread_id.outputs.GOOGLE_CHAT_THREAD_ID }}"

      - name: send pull request review comment message
        if: ${{ github.event_name == 'pull_request_review_comment' }}
        run: |
          curl -X POST \
            -H 'Content-Type: application/json' \
            -d "{\"text\": \"${{ github.event_name }} ${{ github.triggering_actor }} ${{ github.event.action }} / ${{ github.event.pull_request.state }} '${{ github.event.pull_request.title }}' ${{ github.event.pull_request.draft && '(draft)' || '' }} : \n\n${{ github.event.comment.body || '' }}\n\n${{ github.event.comment._links.html.href }} \" }" \
            "${{secrets.GOOGLECHAT_PIPELINE_ANNOUNCEMENTS_WEBHOOK}}&messageReplyOption=REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD&thread_key=${{ steps.google_chat_thread_id.outputs.GOOGLE_CHAT_THREAD_ID }}"

      - name: send pull request comment message
        if: ${{ github.event_name == 'issue_comment' && github.event.issue.pull_request }}
        run: |
          curl -X POST \
            -H 'Content-Type: application/json' \
            -d "{\"text\": \"${{ github.event_name }} ${{ github.triggering_actor }} ${{ github.event.action }} : \n\n${{ github.event.comment.body || '' }}\n\n${{ github.event.comment.html_url }} \" }" \
            "${{secrets.GOOGLECHAT_PIPELINE_ANNOUNCEMENTS_WEBHOOK}}&messageReplyOption=REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD&thread_key=${{ steps.google_chat_thread_id.outputs.GOOGLE_CHAT_THREAD_ID }}"

      # variablen im curl json body mÃ¼ssen noch encoded werden (" -> \")
      # requested review und draft fehlt noch

